generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  SUPERADMIN
  ADMIN_OPERATIONAL
  ADMIN_FINANCE
  DRIVER
  CUSTOMER
}

enum Notification_Type {
  PROMO
  REMINDER
}

enum Vehicle_status {
  RENTED
  MAINTENANCE
  AVAILABLE
  DISABLE
}

enum Transmission { 
  MANUAL
  AUTOMATIC
}

enum RatedEntityType {
  DESTINATION
  VEHICLE
  PACKAGE
}

enum Vehicle_Types {
  CITY_CAR
  HATCHBACK
  SEDAN
  SUV
  MPV
  MINIVAN
  PICKUP
  DOUBLE_CABIN
  LUXURY
  ELECTRIC_CAR
}

enum Fuel {
  PERTALITE
  PERTAMAX
  DEXLITE
  PERTAMAXTURBO 
}

enum Booking_Status {
  SUBMITTED
  PAYMENT_PENDING 
  RECEIVED
  COMPLETE
  CANCELED
  REJECTED_BOOKING
  REJECTED_REFUND
  REJECTED_RESHECULE
  RESCHEDULE_REQUESTED 
  RESCHEDULE
  REFUND_REQUESTED 
  REFUND
}

enum Promo_Status {
  ACTIVE
  EXPIRED
  UNACTIVE
  CANCELED
}

enum Payment_Method {
  CASH
  BANK_TRANSFER
  QRIS
  EWALLET
  CREDIT_CARD
}

enum Payment_Status {
  PENDING
  PAID
  FAILED
  CANCELED
  EXPIRED
}

enum Discount_Type {
  PERCENTAGE
  FIXED
}

enum Travel_Status {
  WAITING_FOR_CUSTOMER
  ON_THE_WAY
  ARRIVED_AT_DESTINATION
  ONGOING_TRIP
  COMPLETED
  CANCELED
}

model OTPs {
  id          String   @id @default(cuid())
  user_id     String
  otp_code    String
  expiry_time DateTime
  created_at  DateTime @default(now())
  
  user        Users    @relation(fields: [user_id], references: [id])
}

model Users {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  phone_number     String
  password         String
  is_verified      Boolean?
  status           Boolean  @default(true)
  role             Roles?
  year_of_experiences Int?
  created_at       DateTime @default(now())
  updated_at       DateTime? @updatedAt
  deleted_at       DateTime? 
  refresh_token    String?

  otp              OTPs[]
  notification_broadcast Notification_Broadcast[]
  bookings         Bookings[]

  Rating Rating[]
}

model Notifications {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        Notification_Type
  status      Boolean @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  deleted_at  DateTime? 
  
  notification_broadcast Notification_Broadcast[]
}

model Notification_Broadcast {
  id             String   @id @default(cuid())
  notification_id String
  user_id        String
  status         Boolean @default(true)

  read_at        DateTime?
  sent_at        DateTime?

  notification   Notifications @relation(fields: [notification_id], references: [id])
  user           Users         @relation(fields: [user_id], references: [id])
}

model Accommodations {
  id             String    @id @default(cuid())
  name           String
  address        String
  description    String?
  image_urls     String[]  
  price_per_night Decimal  
  facilities  String[]
  status          Boolean
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at      DateTime? 

  Travel_Packages Travel_Packages[]
}

model Travel_Itineraries {
  id                String    @id @default(cuid())
  travel_package_id  String
  day_number        Int
  destination_id    String
  description       String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  travel_package    Travel_Packages @relation(fields: [travel_package_id], references: [id])
  destination       Destinations    @relation(fields: [destination_id], references: [id])
}

model Booking_Vehicles {
  id         String   @id @default(cuid())
  booking_id String
  vehicle_id String

  booking    Bookings @relation(fields: [booking_id], references: [id])
  vehicle    Vehicles @relation(fields: [vehicle_id], references: [id])
}

model Vehicles {
  id             String   @id @default(cuid())
  name           String
  type           Vehicle_Types
  transmition    Transmission 
  status         Vehicle_status
  fuel           Fuel
  brand          String
  capacity       Int 
  kilometer      Int 
  year           Int
  price_per_day  Decimal
  image_url      String[]
  description    String
  color          String

  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  deleted_at     DateTime? 

  bookings        Bookings[]

  Booking_Vehicles Booking_Vehicles[]
}

model Destinations {
  id              String   @id @default(cuid())
  name            String
  open_hour       String
  description     String
  image_urls      String[]
  address         String
  category        String
  facilities      String[]
  status          Boolean @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime? 

  travel_itineraries Travel_Itineraries[]
  travel_package_destinations Travel_Packages_Destinations[]
}

model Travel_Packages_Destinations {
  id              String   @id @default(cuid())
  travel_package_id String 
  destination_id  String
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime? 

  travel_packages Travel_Packages @relation(fields: [travel_package_id], references: [id])
  destination     Destinations @relation(fields: [destination_id], references: [id])
}

model Travel_Packages {
  id              String   @id @default(cuid())
  name            String
  duration        Int 
  description     String
  status          Boolean @default(true)
  accommodation_id   String?
  image           String

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime? 

  accommodation      Accommodations? @relation(fields: [accommodation_id], references: [id])
  travel_itineraries  Travel_Itineraries[]
  pax_options     Travel_Packages_Pax[]
  travel_package_destinations Travel_Packages_Destinations[]
  bookings        Bookings[]
}
model Rating {
  id          String          @id @default(cuid())
  user        Users         @relation(fields: [userId], references: [id])
  userId      String
  ratedType   RatedEntityType
  targetId     String         
  ratingValue Int
  status      Boolean
  comment     String

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at  DateTime? 

  @@unique([userId, ratedType, targetId])
}
model Travel_Packages_Pax {
  id               String   @id @default(cuid())
  travel_package_id String
  pax              Int
  price            Decimal
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at  DateTime? 

  booking     Bookings[]
  travel_package   Travel_Packages @relation(fields: [travel_package_id], references: [id])
}

model Bookings {
  id              String   @id @default(cuid())
  user_id         String
  promo_id        String?
  travel_package_id String?
  status          Booking_Status @default(SUBMITTED)
  start_date      DateTime
  pax_option_id   String?
  end_date        DateTime?
  total_price     Decimal?
  card_id         String
  licences_id     String
  pick_up_at_airport Boolean
  notes           String?

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime? 

  users           Users @relation(fields: [user_id], references: [id])
  promos          Promos? @relation(fields: [promo_id], references: [id])
  travel_package  Travel_Packages? @relation(fields: [travel_package_id], references: [id])
  booking_vehicles Booking_Vehicles[]

  Payments Payments[]
  Vehicles Vehicles[]

  pax_option         Travel_Packages_Pax? @relation(fields: [pax_option_id], references: [id])
}

model Promos {
  id              String   @id @default(cuid())
  code            String
  description     String 
  discount_type   Discount_Type
  discount_value  Decimal
  start_date      DateTime
  end_date        DateTime
  min_booking_amount Decimal
  max_discount    Decimal
  status          Promo_Status @default(ACTIVE)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime? 

  bookings        Bookings[]
}

model Payments {
  id              String   @id @default(cuid())
  booking_id      String
  payment_method  Payment_Method?
  payment_status  Payment_Status @default(PENDING)
  payment_date    DateTime?
  total_amount    Decimal
  expiry_date DateTime?

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?

  booking         Bookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
}

